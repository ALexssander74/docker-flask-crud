# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
    - dev
   
pr:
  - master

resources:
- repo: self

variables:
  # BUILD - Container registry service connection established during pipeline creation
  project: 'phonebook'
  dockerRegistryServiceConnection: 'pavan-dockerhub'
  containerRegistry: 'Container Registry'
  imageRepository: 'aletipavan/phonemysql' 
  dockerFilePath: 'Dockerfile-mysql'
  tag: 'latest'
  tag_buildnumber: $(Build.BuildNumber)

  
  # Scan variables
  trivyVersion: 0.9.2

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: Docker@2
      displayName: Login to DockerHub 
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - task: Docker@2
      displayName: Docker Build
      inputs:
        command: build
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        Dockerfile: $(dockerFilePath)

- stage: "Stage - Scan"
  displayName: Scan Image
  jobs:
    - job: Scan Image
      steps:
      - script: |
          sudo apt-get install rpm
          wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
          sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
          trivy -v
        displayName: 'Setup Trivy Image Scanner'

      - task: CmdLine@2
        displayName: "Run trivy Image scan"
        inputs:
          script: |
              trivy image --exit-code 0 --severity LOW,MEDIUM $(imageRepository):$(tag)
              trivy image --exit-code 1 --severity HIGH,CRITICAL $(imageRepository):$(tag)

- stage: "Stage - Push"
  displayName: Push Image
  jobs:
    - job: Push
      steps:
      ## Logout of Docker Hub
      - task: Docker@2
        displayName: Logout of DockerHub
        inputs:
          command: logout
          containerRegistry: $(dockerRegistryServiceConnection)

      ## Artifact to drop folder
      - task: CopyFiles@2
        displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'